import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import time
from resistojet_simulation import (
    hydrogen_properties, 
    inconel_properties, 
    calculate_flow_parameters, 
    calculate_heat_transfer,
    steady_state_simulation,
    plot_results,
    calculate_equilibrium_time,
    CHAMBER_HEIGHT,
    CHAMBER_INNER_DIAMETER,
    CHAMBER_WALL_THICKNESS,
    COOLING_GAP,
    COOLING_WALL_THICKNESS,
    MASS_FLOW_RATE,
    PRESSURE,
    HEATER_POWER,
    INITIAL_TEMP,
    NUM_STATIONS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞",
    page_icon="üöÄ",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–ø–ª–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞")
st.markdown("""
–≠—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Ä–µ–∑–∏—Å—Ç–∏–≤–Ω–æ–º —Ä–∞–∫–µ—Ç–Ω–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ 
—Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–±–ª—é–¥–∞—Ç—å –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
""")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

# –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–ì–µ–æ–º–µ—Ç—Ä–∏—è")
chamber_height = st.sidebar.slider("–í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã (–º–º)", 20.0, 100.0, float(CHAMBER_HEIGHT*1000), 1.0) / 1000
chamber_inner_diameter = st.sidebar.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä –∫–∞–º–µ—Ä—ã (–º–º)", 10.0, 50.0, float(CHAMBER_INNER_DIAMETER*1000), 1.0) / 1000
chamber_wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ –∫–∞–º–µ—Ä—ã (–º–º)", 0.5, 5.0, float(CHAMBER_WALL_THICKNESS*1000), 0.1) / 1000
cooling_gap = st.sidebar.slider("–ó–∞–∑–æ—Ä –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (–º–º)", 0.5, 5.0, float(COOLING_GAP*1000), 0.1) / 1000
cooling_wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π —Ä—É–±–∞—à–∫–∏ (–º–º)", 0.5, 5.0, float(COOLING_WALL_THICKNESS*1000), 0.1) / 1000

# –†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
mass_flow_rate = st.sidebar.slider("–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ (–º–≥/—Å)", 1.0, 20.0, float(MASS_FLOW_RATE*1e6), 0.1) / 1e6
pressure = st.sidebar.slider("–î–∞–≤–ª–µ–Ω–∏–µ (–ú–ü–∞)", 0.1, 5.0, float(PRESSURE/1e6), 0.1) * 1e6
heater_power = st.sidebar.slider("–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è (–í—Ç)", 10, 200, int(HEATER_POWER), 1)
initial_temp = st.sidebar.slider("–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K)", 100, 500, int(INITIAL_TEMP), 10)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞")
num_stations = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫", 10, 50, NUM_STATIONS, 1)

# –î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞" –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
max_iterations = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 500, 5000, 2000, 100)
tolerance = st.sidebar.slider("–î–æ–ø—É—Å–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (K)", 0.1, 2.0, 0.5, 0.1)
relaxation_factor = st.sidebar.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏", 0.01, 0.2, 0.05, 0.01)

# –†–∞—Å—á–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Streamlit
chamber_inner_radius = chamber_inner_diameter / 2
chamber_outer_radius = chamber_inner_radius + chamber_wall_thickness
cooling_inner_radius = chamber_outer_radius
cooling_outer_radius = cooling_inner_radius + cooling_gap
cooling_jacket_outer_radius = cooling_outer_radius + cooling_wall_thickness

# –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–µ–π
chamber_inner_area_local = np.pi * chamber_inner_radius**2
cooling_area_local = np.pi * (cooling_outer_radius**2 - cooling_inner_radius**2)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
run_button = st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç")

# –¢–∞–π–º–µ—Ä –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if run_button:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    countdown_time = 3  # —Å–µ–∫—É–Ω–¥—ã
    countdown_placeholder = st.empty()
    
    for i in range(countdown_time, 0, -1):
        countdown_placeholder.markdown(f"<h2 style='text-align: center'>–†–∞—Å—á–µ—Ç –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {i} —Å–µ–∫...</h2>", unsafe_allow_html=True)
        time.sleep(1)
        progress_bar.progress(int((countdown_time - i) / countdown_time * 30))
    
    countdown_placeholder.empty()
    
    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞
    status_text.text("–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞
    progress_status = st.empty()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞
    def progress_callback(iteration, max_iterations, max_diff):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar.progress(int(30 + 70 * iteration / max_iterations))
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        elapsed_time = time.time() - start_time
        estimated_total = elapsed_time / (iteration + 1) * max_iterations
        remaining_time = estimated_total - elapsed_time
        
        progress_status.markdown(f"""
        **–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞:**
        - –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration + 1} –∏–∑ {max_iterations}
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max_diff:.4f} K
        - –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f} —Å–µ–∫
        - –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {remaining_time:.1f} —Å–µ–∫
        """)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        time.sleep(0.01)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    T_chamber_wall, T_cooling_fluid, T_chamber_fluid, iterations_completed = steady_state_simulation(
        progress_callback=progress_callback,
        max_iterations=max_iterations,
        tolerance=tolerance,
        relaxation_factor=relaxation_factor
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_bar.progress(100)
    status_text.text(f"–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig = plt.figure(figsize=(12, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    ax1 = fig.add_subplot(2, 2, 1)
    z_normalized = np.linspace(0, 1, len(T_chamber_wall))
    ax1.plot(z_normalized, T_chamber_wall, 'r-', label='–°—Ç–µ–Ω–∫–∞ –∫–∞–º–µ—Ä—ã')
    ax1.plot(z_normalized, T_cooling_fluid, 'b-', label='–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax1.plot(z_normalized, T_chamber_fluid, 'g-', label='–†–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax1.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞')
    ax1.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K)')
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä')
    ax1.legend()
    ax1.grid(True)
    
    # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    v_cooling = np.zeros(num_stations)
    v_chamber = np.zeros(num_stations)
    
    for i in range(num_stations):
        v_cooling[i] = calculate_flow_parameters(T_cooling_fluid[i], cooling_area_local)['velocity']
        v_chamber[i] = calculate_flow_parameters(T_chamber_fluid[i], chamber_inner_area_local)['velocity']
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    ax2 = fig.add_subplot(2, 2, 2)
    ax2.plot(z_normalized, v_cooling, 'b-', label='–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax2.plot(z_normalized, v_chamber, 'g-', label='–†–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax2.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞')
    ax2.set_ylabel('–°–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)')
    ax2.set_title('–ü—Ä–æ—Ñ–∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–µ–π')
    ax2.legend()
    ax2.grid(True)
    
    # –†–∞—Å—á–µ—Ç —á–∏—Å–µ–ª –†–µ–π–Ω–æ–ª—å–¥—Å–∞
    re_cooling = np.zeros(num_stations)
    re_chamber = np.zeros(num_stations)
    
    for i in range(num_stations):
        re_cooling[i] = calculate_flow_parameters(T_cooling_fluid[i], cooling_area_local)['reynolds']
        re_chamber[i] = calculate_flow_parameters(T_chamber_fluid[i], chamber_inner_area_local)['reynolds']
    
    # –ì—Ä–∞—Ñ–∏–∫ —á–∏—Å–µ–ª –†–µ–π–Ω–æ–ª—å–¥—Å–∞
    ax3 = fig.add_subplot(2, 2, 3)
    ax3.plot(z_normalized, re_cooling, 'b-', label='–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax3.plot(z_normalized, re_chamber, 'g-', label='–†–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax3.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞')
    ax3.set_ylabel('–ß–∏—Å–ª–æ –†–µ–π–Ω–æ–ª—å–¥—Å–∞')
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª –†–µ–π–Ω–æ–ª—å–¥—Å–∞')
    ax3.legend()
    ax3.grid(True)
    
    # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á–∏
    h_cooling = np.zeros(num_stations)
    h_chamber = np.zeros(num_stations)
    
    for i in range(num_stations):
        h_cooling[i] = calculate_heat_transfer(
            T_cooling_fluid[i], 
            T_chamber_wall[i], 
            'cooling', 
            2 * cooling_gap
        )
        
        h_chamber[i] = calculate_heat_transfer(
            T_chamber_fluid[i], 
            T_chamber_wall[i], 
            'chamber', 
            chamber_inner_diameter
        )
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á–∏
    ax4 = fig.add_subplot(2, 2, 4)
    ax4.plot(z_normalized, h_cooling, 'b-', label='–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax4.plot(z_normalized, h_chamber, 'g-', label='–†–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å')
    ax4.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞')
    ax4.set_ylabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á–∏ (–í—Ç/(–º¬≤¬∑–ö))')
    ax4.set_title('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á–∏')
    ax4.legend()
    ax4.grid(True)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # –í—ã–≤–æ–¥ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.header("6.2 –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        st.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–µ–Ω–∫–∏ –∫–∞–º–µ—Ä—ã: {np.max(T_chamber_wall):.2f} K")
        st.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: {np.max(T_cooling_fluid):.2f} K")
        st.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—á–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: {np.max(T_chamber_fluid):.2f} K")
        st.info(f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–µ–Ω–∫–∏ –∫–∞–º–µ—Ä—ã: {np.mean(T_chamber_wall):.2f} K")
    
    with col2:
        st.subheader("–ü—Ä–∏—Ä–æ—Å—Ç—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
        st.success(f"–ü—Ä–∏—Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: {T_cooling_fluid[-1] - T_cooling_fluid[0]:.2f} K")
        st.success(f"–ü—Ä–∏—Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞–±–æ—á–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: {T_chamber_fluid[0] - T_chamber_fluid[-1]:.2f} K")
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å dz - –≤—ã—á–∏—Å–ª—è–µ–º —à–∞–≥ –ø–æ –≤—ã—Å–æ—Ç–µ
        dz = CHAMBER_HEIGHT / (NUM_STATIONS - 1)
        st.success(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ —Å—Ç–µ–Ω–∫–µ: {np.max(np.diff(T_chamber_wall)/dz):.2f} K/–º")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    st.subheader("–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å—Ç–µ–Ω–∫–µ –∫–∞–º–µ—Ä—ã –Ω–∞–≥—Ä–µ–≤–∞")
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ (90% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã)
    elapsed_time = time.time() - start_time
    iterations_to_convergence = iterations_completed
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ
    equilibrium_times = calculate_equilibrium_time(T_chamber_wall, heater_power)
    
    st.info(f"–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥ ({iterations_to_convergence} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    st.info(f"–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ (90%): {equilibrium_times['time_to_90_percent']:.2f} —Å–µ–∫—É–Ω–¥")
    st.info(f"–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ (99%): {equilibrium_times['time_to_99_percent']:.2f} —Å–µ–∫—É–Ω–¥")
    st.info(f"–¢–µ–ø–ª–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã: {equilibrium_times['time_constant']:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
    time_scale = np.linspace(0, equilibrium_times['time_to_99_percent'] * 1.2, 100)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞)
    T_initial = INITIAL_TEMP
    T_final = np.max(T_chamber_wall)
    T_time = T_initial + (T_final - T_initial) * (1 - np.exp(-time_scale / equilibrium_times['time_constant']))
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig_time, ax_time = plt.subplots(figsize=(10, 6))
    ax_time.plot(time_scale, T_time, 'r-', linewidth=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è 90% –∏ 99% –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–≥–æ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
    T_90 = T_initial + 0.9 * (T_final - T_initial)
    T_99 = T_initial + 0.99 * (T_final - T_initial)
    
    ax_time.axhline(y=T_90, color='g', linestyle='--', label='90% –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–≥–æ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è')
    ax_time.axhline(y=T_99, color='b', linestyle='--', label='99% –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–≥–æ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è')
    
    ax_time.axvline(x=equilibrium_times['time_to_90_percent'], color='g', linestyle='--')
    ax_time.axvline(x=equilibrium_times['time_to_99_percent'], color='b', linestyle='--')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    ax_time.set_xlabel('–í—Ä–µ–º—è (—Å)')
    ax_time.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–µ–Ω–∫–∏ (K)')
    ax_time.set_title('–í—ã—Ö–æ–¥ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å—Ç–µ–Ω–∫–∏ –∫–∞–º–µ—Ä—ã')
    ax_time.grid(True)
    ax_time.legend()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    st.pyplot(fig_time)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    st.subheader("7. –í–ê–õ–ò–î–ê–¶–ò–Ø")
    st.write("- –ö–æ–Ω—Ç—Ä–æ–ª—å ¬´—Ñ–∏–∑–∏—á–Ω–æ—Å—Ç–∏¬ª")
    
    st.subheader("8. –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    st.write("8.1 –§–∞–∑–∞ 1: –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è –º–æ–¥–µ–ª—å")
    st.write("- –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–ª—è
    st.header("–ü—Ä–∏–º–µ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏")
    st.write("""
    –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —á–∏—Å–ª–∞ –ú–∞—Ö–∞ –≤ —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–µ, 
    –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
    """)

    # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏ (–æ–¥–∏–Ω –Ω–∞–¥ –¥—Ä—É–≥–∏–º)
    fig_combined, (ax_temp_field, ax_mach_field) = plt.subplots(2, 1, figsize=(12, 12))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å —Ñ–æ—Ä–º–æ–π, –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–π –Ω–∞ –ø—Ä–∏–º–µ—Ä –∏–∑ PDF
    # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É –∫–∞–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å–æ–ø–ª–æ
    r_points = np.linspace(0, cooling_jacket_outer_radius*1.2, 100)
    z_points = np.linspace(0, chamber_height, 200)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–ø–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    nozzle_profile = np.zeros_like(z_points)
    for i, z in enumerate(z_points):
        # –°—É–∂–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        if z < chamber_height * 0.4:
            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å—É–∂–µ–Ω–∏–µ
            nozzle_profile[i] = chamber_inner_radius * (1 - 0.3 * (z / (chamber_height * 0.4)))
        else:
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—É–∂–µ–Ω–∏—è
            nozzle_profile[i] = chamber_inner_radius * 0.7 + chamber_inner_radius * 0.8 * ((z - chamber_height * 0.4) / (chamber_height * 0.6))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
    r_mesh, z_mesh = np.meshgrid(r_points, z_points)

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    T_field = np.zeros_like(r_mesh)

    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    from scipy.interpolate import interp1d

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    z_norm = np.linspace(0, 1, len(T_chamber_wall))
    T_wall_interp = interp1d(z_norm, T_chamber_wall, kind='cubic', fill_value='extrapolate')
    T_cooling_interp = interp1d(z_norm, T_cooling_fluid, kind='cubic', fill_value='extrapolate')
    T_chamber_interp = interp1d(z_norm, T_chamber_fluid, kind='cubic', fill_value='extrapolate')

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º—ã —Å–æ–ø–ª–∞
    for i in range(len(z_points)):
        z_pos = z_points[i]
        z_normalized = z_pos / chamber_height
        nozzle_r = nozzle_profile[i]
        
        for j in range(len(r_points)):
            r_pos = r_points[j]
            
            if r_pos < nozzle_r:
                # –í–Ω—É—Ç—Ä–∏ –∫–∞–º–µ—Ä—ã (—Ä–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å)
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç –≤—Ö–æ–¥–∞ –∫ –≤—ã—Ö–æ–¥—É
                T_field[i, j] = T_chamber_interp(z_normalized)
            elif r_pos < nozzle_r + chamber_wall_thickness:
                # –°—Ç–µ–Ω–∫–∞ –∫–∞–º–µ—Ä—ã
                T_field[i, j] = T_wall_interp(z_normalized)
            elif r_pos < nozzle_r + chamber_wall_thickness + cooling_gap:
                # –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å
                T_field[i, j] = T_cooling_interp(z_normalized)
            elif r_pos < nozzle_r + chamber_wall_thickness + cooling_gap + cooling_wall_thickness:
                # –í–Ω–µ—à–Ω—è—è —Å—Ç–µ–Ω–∫–∞
                T_field[i, j] = T_cooling_interp(z_normalized) * 0.9  # –ù–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–µ–µ
            else:
                # –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è - –∫–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                T_field[i, j] = INITIAL_TEMP

    # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ PDF
    temp_colors = [
        (0, 'rgb(0, 0, 128)'),      # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è T=300K
        (0.1, 'rgb(0, 0, 255)'),    # —Å–∏–Ω–∏–π –¥–ª—è T=600K
        (0.2, 'rgb(0, 128, 255)'),  # –≥–æ–ª—É–±–æ–π –¥–ª—è T=900K
        (0.3, 'rgb(0, 255, 255)'),  # —Ü–∏–∞–Ω –¥–ª—è T=1200K
        (0.4, 'rgb(0, 255, 128)'),  # —Å–∏–Ω–µ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è T=1500K
        (0.5, 'rgb(0, 255, 0)'),    # –∑–µ–ª–µ–Ω—ã–π –¥–ª—è T=1800K
        (0.6, 'rgb(128, 255, 0)'),  # –∂–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è T=2100K
        (0.7, 'rgb(255, 255, 0)'),  # –∂–µ–ª—Ç—ã–π –¥–ª—è T=2400K
        (0.8, 'rgb(255, 128, 0)'),  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è T=2700K
        (0.9, 'rgb(255, 0, 0)'),    # –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è T=3000K
        (1.0, 'rgb(128, 0, 0)')     # —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è T=3300K
    ]
    temp_cmap = LinearSegmentedColormap.from_list('temp_map', temp_colors, N=100)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    T_min = np.min(T_field)
    T_max = np.max(T_field)
    
    # –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ PDF
    temp_ticks = np.linspace(1200, 3600, 13)  # 13 –¥–µ–ª–µ–Ω–∏–π –æ—Ç 1200K –¥–æ 3600K —Å —à–∞–≥–æ–º 200K
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∫–∞–ª–µ
    temp_norm = plt.Normalize(1200, 3600)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temp_contour = ax_temp_field.contourf(z_mesh*1000, r_mesh*1000, T_field, 
                                         levels=50, cmap=temp_cmap, norm=temp_norm)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü —Å–æ–ø–ª–∞
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–ø–ª–∞
    nozzle_inner_x = z_points * 1000
    nozzle_inner_y = nozzle_profile * 1000
    nozzle_outer_x = z_points * 1000
    nozzle_outer_y = (nozzle_profile + chamber_wall_thickness) * 1000
    cooling_outer_x = z_points * 1000
    cooling_outer_y = (nozzle_profile + chamber_wall_thickness + cooling_gap) * 1000
    jacket_outer_x = z_points * 1000
    jacket_outer_y = (nozzle_profile + chamber_wall_thickness + cooling_gap + cooling_wall_thickness) * 1000
    
    # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    ax_temp_field.plot(nozzle_inner_x, nozzle_inner_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(nozzle_outer_x, nozzle_outer_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(cooling_outer_x, cooling_outer_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(jacket_outer_x, jacket_outer_y, 'k-', linewidth=1.5)
    
    # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    ax_temp_field.plot(nozzle_inner_x, -nozzle_inner_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(nozzle_outer_x, -nozzle_outer_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(cooling_outer_x, -cooling_outer_y, 'k-', linewidth=1.5)
    ax_temp_field.plot(jacket_outer_x, -jacket_outer_y, 'k-', linewidth=1.5)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–Ω—ã—Ö –ª–∏–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temp_contour_lines = ax_temp_field.contour(z_mesh*1000, r_mesh*1000, T_field, 
                                              levels=20, colors='black', linewidths=0.5, alpha=0.7)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∫ –∫–æ–Ω—Ç—É—Ä–∞–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    plt.clabel(temp_contour_lines, inline=True, fontsize=8, fmt='%.0f')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    ax_temp_field.set_xlabel('–í—ã—Å–æ—Ç–∞ (–º–º)')
    ax_temp_field.set_ylabel('–†–∞–¥–∏—É—Å (–º–º)')
    ax_temp_field.set_title('T (K)')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø–æ –æ—Å–∏ Y –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    y_max = max(np.max(jacket_outer_y), np.max(r_mesh*1000)) * 1.1
    ax_temp_field.set_ylim(-y_max, y_max)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã —Å –¥–µ–ª–µ–Ω–∏—è–º–∏ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    cbar = fig_combined.colorbar(temp_contour, ax=ax_temp_field, ticks=temp_ticks)
    cbar.set_label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ —á–∞—Å—Ç—è–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    ax_temp_field.text(chamber_height*1000*0.1, 0, 
                      '–†–∞–±–æ—á–∞—è\n–∂–∏–¥–∫–æ—Å—Ç—å', ha='center', va='center', fontsize=10)
    ax_temp_field.text(chamber_height*1000*0.1, 
                      (nozzle_profile[20] + chamber_wall_thickness/2)*1000, 
                      '–°—Ç–µ–Ω–∫–∞', ha='center', va='center', fontsize=10)
    ax_temp_field.text(chamber_height*1000*0.1, 
                      (nozzle_profile[20] + chamber_wall_thickness + cooling_gap/2)*1000, 
                      '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', ha='center', va='center', fontsize=10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    # –°—Ç—Ä–µ–ª–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
    ax_temp_field.arrow(chamber_height*1000*0.8, nozzle_profile[160]*1000*0.5, 
                       -chamber_height*1000*0.2, 0, 
                       head_width=2, head_length=5, fc='white', ec='black', linewidth=1)
    
    # –°—Ç—Ä–µ–ª–∫–∞ –¥–ª—è –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
    ax_temp_field.arrow(chamber_height*1000*0.2, 
                       (nozzle_profile[40] + chamber_wall_thickness + cooling_gap/2)*1000, 
                       chamber_height*1000*0.2, 0, 
                       head_width=2, head_length=5, fc='white', ec='black', linewidth=1)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ "fuel cooling injector" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    ax_temp_field.text(chamber_height*1000*0.05, 
                      (nozzle_profile[10] + chamber_wall_thickness + cooling_gap + cooling_wall_thickness)*1000*1.1, 
                      'fuel cooling injector', ha='left', va='center', fontsize=10)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≥–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–æ–ø–ª–∞ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    ax_temp_field.text(chamber_height*1000*0.95, 
                      (nozzle_profile[-1] + chamber_wall_thickness + cooling_gap + cooling_wall_thickness)*1000*1.2, 
                      'Œµ = 12', ha='right', va='center', fontsize=10)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –ú–∞—Ö–∞
    mach_field = np.zeros_like(r_mesh)
    
    # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–≤—É–∫–∞ –∏ —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    def calculate_mach_number(T, velocity):
        # –°–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞ –≤ –≤–æ–¥–æ—Ä–æ–¥–µ (–º/—Å)
        # c = sqrt(gamma * R * T / M)
        gamma = 1.4  # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–¥–∏–∞–±–∞—Ç—ã –¥–ª—è –≤–æ–¥–æ—Ä–æ–¥–∞
        R = 8.314  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è (–î–∂/(–º–æ–ª—å¬∑–ö))
        M = 0.002016  # –ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ –≤–æ–¥–æ—Ä–æ–¥–∞ (–∫–≥/–º–æ–ª—å)
        
        sound_speed = np.sqrt(gamma * R * T / M)
        mach = velocity / sound_speed
        return mach
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –ú–∞—Ö–∞
    for i in range(len(z_points)):
        z_pos = z_points[i]
        z_normalized = z_pos / chamber_height
        nozzle_r = nozzle_profile[i]
        
        # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —á–∏—Å–ª–∞ –ú–∞—Ö–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏
        if i < len(T_chamber_fluid):
            chamber_velocity = calculate_flow_parameters(T_chamber_fluid[i], np.pi * nozzle_r**2)['velocity']
            chamber_mach = calculate_mach_number(T_chamber_fluid[i], chamber_velocity)
        else:
            chamber_mach = 0
            
        for j in range(len(r_points)):
            r_pos = r_points[j]
            
            if r_pos < nozzle_r:
                # –í–Ω—É—Ç—Ä–∏ –∫–∞–º–µ—Ä—ã (—Ä–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å)
                # –ß–∏—Å–ª–æ –ú–∞—Ö–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤—ã—Ö–æ–¥—É —Å–æ–ø–ª–∞
                if z_pos < chamber_height * 0.4:
                    # –î–æ —Å—É–∂–µ–Ω–∏—è - –Ω–∏–∑–∫–æ–µ —á–∏—Å–ª–æ –ú–∞—Ö–∞
                    mach_field[i, j] = chamber_mach * (1 + z_pos / (chamber_height * 0.4))
                else:
                    # –ü–æ—Å–ª–µ —Å—É–∂–µ–Ω–∏—è - –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —á–∏—Å–ª–∞ –ú–∞—Ö–∞
                    mach_field[i, j] = chamber_mach * 2 + chamber_mach * 5 * ((z_pos - chamber_height * 0.4) / (chamber_height * 0.6))
            else:
                # –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞–º–µ—Ä—ã - –Ω–µ—Ç –ø–æ—Ç–æ–∫–∞
                mach_field[i, j] = 0
    
    # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ PDF
    mach_colors = [
        (0, 'rgb(0, 0, 128)'),      # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è M=0
        (0.1, 'rgb(0, 0, 255)'),    # —Å–∏–Ω–∏–π –¥–ª—è M=0.3
        (0.2, 'rgb(0, 128, 255)'),  # –≥–æ–ª—É–±–æ–π –¥–ª—è M=0.7
        (0.3, 'rgb(0, 255, 255)'),  # —Ü–∏–∞–Ω –¥–ª—è M=1.1
        (0.4, 'rgb(0, 255, 128)'),  # —Å–∏–Ω–µ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è M=1.5
        (0.5, 'rgb(0, 255, 0)'),    # –∑–µ–ª–µ–Ω—ã–π –¥–ª—è M=1.9
        (0.6, 'rgb(128, 255, 0)'),  # –∂–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è M=2.3
        (0.7, 'rgb(255, 255, 0)'),  # –∂–µ–ª—Ç—ã–π –¥–ª—è M=2.7
        (0.8, 'rgb(255, 128, 0)'),  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è M=3.1
        (1.0, 'rgb(255, 0, 0)')     # –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è M=3.5+
    ]
    mach_cmap = LinearSegmentedColormap.from_list('mach_map', mach_colors, N=100)

    # –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É —á–∏—Å–µ–ª –ú–∞—Ö–∞ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ PDF
    mach_ticks = np.linspace(0, 3.7, 10)  # 10 –¥–µ–ª–µ–Ω–∏–π –æ—Ç 0 –¥–æ 3.7
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –ú–∞—Ö–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∫–∞–ª–µ
    mach_norm = plt.Normalize(0, 3.7)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    mach_contour = ax_mach_field.contourf(z_mesh*1000, r_mesh*1000, mach_field,
                                         levels=50, cmap=mach_cmap, norm=mach_norm)
    
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–ø–ª–∞ –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    ax_mach_field.plot(nozzle_inner_x, nozzle_inner_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(nozzle_outer_x, nozzle_outer_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(cooling_outer_x, cooling_outer_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(jacket_outer_x, jacket_outer_y, 'k-', linewidth=1.5)
    
    # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ) –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    ax_mach_field.plot(nozzle_inner_x, -nozzle_inner_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(nozzle_outer_x, -nozzle_outer_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(cooling_outer_x, -cooling_outer_y, 'k-', linewidth=1.5)
    ax_mach_field.plot(jacket_outer_x, -jacket_outer_y, 'k-', linewidth=1.5)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–Ω—ã—Ö –ª–∏–Ω–∏–π —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    mach_contour_lines = ax_mach_field.contour(z_mesh*1000, r_mesh*1000, mach_field, 
                                              levels=15, colors='black', linewidths=0.5, alpha=0.7)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∫ –∫–æ–Ω—Ç—É—Ä–∞–º —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    plt.clabel(mach_contour_lines, inline=True, fontsize=8, fmt='%.1f')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "Œµ = 12" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≥—Ä–∞—Ñ–∏–∫–∞ —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    ax_mach_field.text(chamber_height*1000*0.95, 
                      (nozzle_profile[-1] + chamber_wall_thickness + cooling_gap + cooling_wall_thickness)*1000*1.2, 
                      'Œµ = 12', ha='right', va='center', fontsize=10)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    ax_mach_field.set_xlabel('–í—ã—Å–æ—Ç–∞ (–º–º)')
    ax_mach_field.set_ylabel('–†–∞–¥–∏—É—Å (–º–º)')
    ax_mach_field.set_title('Mach')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø–æ –æ—Å–∏ Y –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    ax_mach_field.set_ylim(-y_max, y_max)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã —Å –¥–µ–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —á–∏—Å–ª–∞ –ú–∞—Ö–∞
    mach_cbar = fig_combined.colorbar(mach_contour, ax=ax_mach_field, ticks=mach_ticks)
    mach_cbar.set_label('–ß–∏—Å–ª–æ –ú–∞—Ö–∞')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.tight_layout()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig_combined)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    st.write("""
    –ù–∞ –≤–µ—Ä—Ö–Ω–µ–º –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞:
    - **–°–∏–Ω–∏–π —Ü–≤–µ—Ç**: –Ω–∏–∑–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–æ–∫–æ–ª–æ {:.0f} K)
    - **–ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç**: —Å—Ä–µ–¥–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    - **–ñ–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç**: –≤—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    - **–ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç**: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–æ–∫–æ–ª–æ {:.0f} K)
    
    –ù–∞ –Ω–∏–∂–Ω–µ–º –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ú–∞—Ö–∞:
    - **–°–∏–Ω–∏–π —Ü–≤–µ—Ç**: –¥–æ–∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ (M < 1)
    - **–ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç**: –æ–∫–æ–ª–æ–∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ (M ‚âà 1)
    - **–ñ–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç**: —Å–≤–µ—Ä—Ö–∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ (1 < M < 3)
    - **–ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç**: –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Å–≤–µ—Ä—Ö–∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ (M > 3)
    
    –ß–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Ç—É—Ä—ã —Ä–∞–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—É—á—à–µ –≤–∏–¥–µ—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã.
    """.format(T_min, T_max))

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ—Ç–æ–∫–∞
    st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ—Ç–æ–∫–∞")
    st.write("""
    –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–µ.
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    fig_vel_field, ax_vel_field = plt.subplots(figsize=(12, 6))

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    v_field_r = np.zeros_like(r_mesh)
    v_field_z = np.zeros_like(z_mesh)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    for i in range(len(z_points)):
        z_pos = z_points[i]
        z_normalized = z_pos / chamber_height
        
        for j in range(len(r_points)):
            r_pos = r_points[j]
            
            if r_pos < chamber_inner_radius:
                # –í–Ω—É—Ç—Ä–∏ –∫–∞–º–µ—Ä—ã (—Ä–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å) - –¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                v_z = -T_chamber_interp(z_normalized) / T_chamber_interp(0.5) * 2  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                v_field_z[i, j] = v_z
                v_field_r[i, j] = 0  # –†–∞–¥–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –±–ª–∏–∑–∫–∞ –∫ –Ω—É–ª—é
                
            elif r_pos < chamber_outer_radius:
                # –°—Ç–µ–Ω–∫–∞ –∫–∞–º–µ—Ä—ã - –Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
                v_field_z[i, j] = 0
                v_field_r[i, j] = 0
                
            elif r_pos < cooling_outer_radius:
                # –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å - –¥–≤–∏–∂–µ–Ω–∏–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                v_z = T_cooling_interp(z_normalized) / T_cooling_interp(0.5) * 2  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                v_field_z[i, j] = v_z
                v_field_r[i, j] = 0  # –†–∞–¥–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –±–ª–∏–∑–∫–∞ –∫ –Ω—É–ª—é
                
            else:
                # –í–Ω–µ—à–Ω—è—è —Å—Ç–µ–Ω–∫–∞ - –Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
                v_field_z[i, j] = 0
                v_field_r[i, j] = 0

    # –†–∞—Å—á–µ—Ç –≤–µ–ª–∏—á–∏–Ω—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
    v_magnitude = np.sqrt(v_field_r**2 + v_field_z**2)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    speed_colors = [(0, 0, 0.5),  # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –Ω–∏–∑–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π
                    (0, 0, 1),    # —Å–∏–Ω–∏–π
                    (0, 0.5, 1),  # –≥–æ–ª—É–±–æ–π
                    (0, 1, 1),    # —Ü–∏–∞–Ω
                    (0, 1, 0.5),  # —Å–∏–Ω–µ-–∑–µ–ª–µ–Ω—ã–π
                    (0, 1, 0),    # –∑–µ–ª–µ–Ω—ã–π
                    (0.5, 1, 0),  # –∂–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
                    (1, 1, 0),    # –∂–µ–ª—Ç—ã–π
                    (1, 0.5, 0),  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                    (1, 0, 0)]    # –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π

    speed_cmap = LinearSegmentedColormap.from_list('speed_map', speed_colors, N=100)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    contour_vel = ax_vel_field.contourf(z_mesh*1000, r_mesh*1000, v_magnitude, 
                                       levels=50, cmap=speed_cmap)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü
    ax_vel_field.axhline(y=chamber_inner_radius*1000, color='black', linestyle='-', linewidth=1)
    ax_vel_field.axhline(y=chamber_outer_radius*1000, color='black', linestyle='-', linewidth=1)
    ax_vel_field.axhline(y=cooling_outer_radius*1000, color='black', linestyle='-', linewidth=1)
    ax_vel_field.axhline(y=cooling_jacket_outer_radius*1000, color='black', linestyle='-', linewidth=1)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
    # –ü—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    skip = 10
    ax_vel_field.quiver(z_mesh[::skip, ::skip]*1000, r_mesh[::skip, ::skip]*1000, 
                       v_field_z[::skip, ::skip], v_field_r[::skip, ::skip],
                       color='white', scale=30, width=0.002, headwidth=3, headlength=4)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    ax_vel_field.set_xlabel('–í—ã—Å–æ—Ç–∞ (–º–º)')
    ax_vel_field.set_ylabel('–†–∞–¥–∏—É—Å (–º–º)')
    ax_vel_field.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–µ')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
    cbar_vel = fig_vel_field.colorbar(contour_vel, ax=ax_vel_field)
    cbar_vel.set_label('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å')

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig_vel_field)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    st.write("""
    –ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ—Ç–æ–∫–∞:
    - –ë–µ–ª—ã–µ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    - –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    - –í –∫–∞–º–µ—Ä–µ –Ω–∞–≥—Ä–µ–≤–∞ —Ä–∞–±–æ—á–∞—è –∂–∏–¥–∫–æ—Å—Ç—å –¥–≤–∏–∂–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    - –í –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π —Ä—É–±–∞—à–∫–µ –æ—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å –¥–≤–∏–∂–µ—Ç—Å—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    """)

    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏
    export_data = {
        'z_normalized': z_normalized.tolist(),
        'T_chamber_wall': T_chamber_wall.tolist(),
        'T_cooling_fluid': T_cooling_fluid.tolist(),
        'T_chamber_fluid': T_chamber_fluid.tolist(),
        'v_cooling': v_cooling.tolist(),
        'v_chamber': v_chamber.tolist(),
        're_cooling': re_cooling.tolist(),
        're_chamber': re_chamber.tolist(),
        'h_cooling': h_cooling.tolist(),
        'h_chamber': h_chamber.tolist()
    }
    
    import json
    export_json = json.dumps(export_data)
    
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (JSON)",
        data=export_json,
        file_name="resistojet_results.json",
        mime="application/json"
    )

else:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞
    st.header("–°—Ö–µ–º–∞ —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig, ax = plt.subplots(figsize=(10, 10), facecolor='white')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    chamber_inner_r = CHAMBER_INNER_DIAMETER / 2 * 1000  # –º–º
    chamber_outer_r = chamber_inner_r + CHAMBER_WALL_THICKNESS * 1000  # –º–º
    cooling_outer_r = chamber_outer_r + COOLING_GAP * 1000  # –º–º
    jacket_outer_r = cooling_outer_r + COOLING_WALL_THICKNESS * 1000  # –º–º
    height = CHAMBER_HEIGHT * 1000  # –º–º
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–∏
    border_width = 5
    border_margin = 20
    ax.add_patch(plt.Rectangle(
        (-jacket_outer_r-border_margin, -border_margin), 
        2*jacket_outer_r+2*border_margin, 
        height+2*border_margin,
        linewidth=border_width, 
        edgecolor='black', 
        facecolor='white'
    ))

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã (—á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏)
    ax.plot([-chamber_inner_r, -chamber_inner_r], [0, height], 'k-', linewidth=3)
    ax.plot([chamber_inner_r, chamber_inner_r], [0, height], 'k-', linewidth=3)

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–∫–∏ –∫–∞–º–µ—Ä—ã (—á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏)
    ax.plot([-chamber_outer_r, -chamber_outer_r], [0, height], 'k-', linewidth=3)
    ax.plot([chamber_outer_r, chamber_outer_r], [0, height], 'k-', linewidth=3)

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π —Ä—É–±–∞—à–∫–∏ (—á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏)
    ax.plot([-cooling_outer_r, -cooling_outer_r], [0, height], 'k-', linewidth=3)
    ax.plot([cooling_outer_r, cooling_outer_r], [0, height], 'k-', linewidth=3)

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ (—á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏)
    ax.plot([-jacket_outer_r, -jacket_outer_r], [0, height], 'k-', linewidth=3)
    ax.plot([jacket_outer_r, jacket_outer_r], [0, height], 'k-', linewidth=3)

    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–∏—Ö –∏ –Ω–∏–∂–Ω–∏—Ö —á–∞—Å—Ç–µ–π
    ax.plot([-chamber_inner_r, chamber_inner_r], [0, 0], 'k-', linewidth=3)
    ax.plot([-chamber_inner_r, chamber_inner_r], [height, height], 'k-', linewidth=3)
    ax.plot([-chamber_outer_r, chamber_outer_r], [0, 0], 'k-', linewidth=3)
    ax.plot([-chamber_outer_r, chamber_outer_r], [height, height], 'k-', linewidth=3)
    ax.plot([-cooling_outer_r, cooling_outer_r], [0, 0], 'k-', linewidth=3)
    ax.plot([-cooling_outer_r, cooling_outer_r], [height, height], 'k-', linewidth=3)
    ax.plot([-jacket_outer_r, jacket_outer_r], [0, 0], 'k-', linewidth=3)
    ax.plot([-jacket_outer_r, jacket_outer_r], [height, height], 'k-', linewidth=3)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª—Ç–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è
    heater_width = chamber_inner_r * 0.8
    heater_height = height * 0.6
    ax.add_patch(plt.Rectangle(
        (-heater_width/2, height*0.2), 
        heater_width, 
        heater_height,
        linewidth=0, 
        facecolor='#FFFF80'  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    ))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ "H2"
    ax.text(0, height*0.8, "H2", 
            ha='center', va='center', fontsize=18, color='black')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    ax.set_xlim(-jacket_outer_r*1.5, jacket_outer_r*1.5)
    ax.set_ylim(-height*0.1, height*1.2)
    ax.axis('off')  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–µ–π

    st.pyplot(fig)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    st.header("–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    st.markdown("""
    ### –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ä–µ–∑–∏—Å—Ç–æ–¥–∂–µ—Ç–∞:
    
    - **–ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–ª–∏–Ω–¥—Ä):**
      - –í—ã—Å–æ—Ç–∞: 40 –º–º
      - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä: 20 –º–º
      - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏: 1 –º–º
      - –ú–∞—Ç–µ—Ä–∏–∞–ª: Inconel 718 SLM
      - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 300K
    
    - **–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è —Ä—É–±–∞—à–∫–∞ (–≤–Ω–µ—à–Ω–∏–π —Ü–∏–ª–∏–Ω–¥—Ä):**
      - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–º
      - –ú–µ–∂–¥—É —Å—Ç–µ–Ω–∫–∞–º–∏ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ 1 –º–º
      - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏: 1 –º–º
      - –ü—Ä–æ—Ç–∏–≤–æ—Ç–æ—á–Ω–∞—è —Å—Ö–µ–º–∞ ‚Äì –≥–∞–∑ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç –≤—ã—Å–æ—Ç—ã = 0 –º–º –¥–æ –≤—ã—Å–æ—Ç—ã 40 –º–º, –∞ –ø–æ—Ç–æ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∏ –∑–∞—Ö–æ–¥–∏—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–ª–∏–Ω–¥—Ä –≥–¥–µ –¥–∞–ª—å—à–µ –≥—Ä–µ–µ—Ç—Å—è.
    
    ### –†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    
    - –†–∞–±–æ—á–µ–µ —Ç–µ–ª–æ: –≤–æ–¥–æ—Ä–æ–¥
    - –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥: 0.000005 –∫–≥/—Å
    - –î–∞–≤–ª–µ–Ω–∏–µ: 1 –ú–ü–∞
    - –ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è: 70 –í—Ç
    - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 300K
    
    ### –ß—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å:
    
    1. **–ì–∏–¥—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞:**
       - –°–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞
       - –ß–∏—Å–ª–∞ –†–µ–π–Ω–æ–ª—å–¥—Å–∞
    
    2. **–¢–µ–ø–ª–æ–æ–±–º–µ–Ω:**
       - –ö–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω –º–µ–∂–¥—É –≥–∞–∑–æ–º –∏ —Å—Ç–µ–Ω–∫–∞–º–∏
       - –¢–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω–∫—É
    
    3. **–†–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
       - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–µ–Ω–æ–∫ –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
       - –ü—Ä–∏—Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–≥–æ –≥–∞–∑–∞
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
st.sidebar.markdown("---")
st.sidebar.info("""
**–û –ø—Ä–æ–µ–∫—Ç–µ**

–ú–æ–¥–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Ä–µ–∑–∏—Å—Ç–∏–≤–Ω–æ–º —Ä–∞–∫–µ—Ç–Ω–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ —Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º.

–ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
""") 